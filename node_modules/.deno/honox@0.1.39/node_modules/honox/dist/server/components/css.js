import { Fragment, jsx } from "hono/jsx/jsx-runtime";
const Css = async (options) => {
  const src = options.src;
  if (options.prod ?? import.meta.env.PROD) {
    let manifest = options.manifest;
    if (!manifest) {
      const MANIFEST = import.meta.glob("/dist/.vite/manifest.json", {
        eager: true
      });
      for (const [, manifestFile] of Object.entries(MANIFEST)) {
        if (manifestFile["default"]) {
          manifest = manifestFile["default"];
          break;
        }
      }
    }
    if (manifest) {
      const scriptInManifest = manifest[src.replace(/^\//, "")];
      if (scriptInManifest) {
        const elements = [];
        if (scriptInManifest.css) {
          for (const css of scriptInManifest.css) {
            elements.push(/* @__PURE__ */ jsx("link", { href: css, rel: "stylesheet" }));
          }
        }
        return /* @__PURE__ */ jsx(Fragment, { children: elements.map((element) => {
          return /* @__PURE__ */ jsx(Fragment, { children: element });
        }) });
      }
    }
    return /* @__PURE__ */ jsx(Fragment, {});
  } else {
    return /* @__PURE__ */ jsx("link", { href: src, rel: "stylesheet" });
  }
};
export {
  Css
};
