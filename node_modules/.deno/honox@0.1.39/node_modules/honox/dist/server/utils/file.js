const filePathToPath = (filePath) => {
  filePath = filePath.replace(/\.tsx?$/g, "").replace(/\.mdx?$/g, "").replace(/^\/?index$/, "/").replace(/\/index$/, "").replace(/\[\.{3}.+\]/, "*").replace(/\[(.+?)\]/g, ":$1");
  return /^\//.test(filePath) ? filePath : "/" + filePath;
};
const groupByDirectory = (files) => {
  const organizedFiles = {};
  for (const [path, content] of Object.entries(files)) {
    const pathParts = path.split("/");
    const fileName = pathParts.pop();
    const directory = pathParts.join("/");
    if (!organizedFiles[directory]) {
      organizedFiles[directory] = {};
    }
    if (fileName) {
      organizedFiles[directory][fileName] = content;
    }
  }
  for (const [directory, files2] of Object.entries(organizedFiles)) {
    const sortedEntries = Object.entries(files2).sort(([keyA], [keyB]) => {
      if (keyA[0] === "[" && keyB[0] !== "[") {
        return 1;
      }
      if (keyA[0] !== "[" && keyB[0] === "[") {
        return -1;
      }
      return keyA.localeCompare(keyB);
    });
    organizedFiles[directory] = Object.fromEntries(sortedEntries);
  }
  return organizedFiles;
};
const sortDirectoriesByDepth = (directories) => {
  const sortedKeys = Object.keys(directories).sort((a, b) => {
    const depthA = a.split("/").length;
    const depthB = b.split("/").length;
    return depthA - depthB || b.localeCompare(a);
  });
  return sortedKeys.map((key) => ({
    [key]: directories[key]
  }));
};
const listByDirectory = (files) => {
  const organizedFiles = {};
  for (const path of Object.keys(files)) {
    const pathParts = path.split("/");
    pathParts.pop();
    const directory = pathParts.join("/");
    if (!organizedFiles[directory]) {
      organizedFiles[directory] = [];
    }
    if (!organizedFiles[directory].includes(path)) {
      organizedFiles[directory].push(path);
    }
  }
  const directories = Object.keys(organizedFiles).sort((a, b) => b.length - a.length);
  for (const dir of directories) {
    for (const subDir of directories) {
      if (subDir.startsWith(dir) && subDir !== dir) {
        const uniqueFiles = /* @__PURE__ */ new Set([...organizedFiles[subDir], ...organizedFiles[dir]]);
        organizedFiles[subDir] = [...uniqueFiles];
      }
    }
  }
  return organizedFiles;
};
const pathToDirectoryPath = (path) => {
  const dirPath = path.replace(/[^\/]+$/, "");
  return dirPath;
};
export {
  filePathToPath,
  groupByDirectory,
  listByDirectory,
  pathToDirectoryPath,
  sortDirectoriesByDepth
};
