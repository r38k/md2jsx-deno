import { Plugin } from 'vite';

type SitemapOptions = {
    hostname?: string;
    exclude?: string[];
    frequency?: Record<string, Frequency>;
    priority?: Record<string, string>;
    outputFileName?: string;
    routesDir?: string;
};
declare const defaultOptions: SitemapOptions;
type Frequency = 'always' | 'hourly' | 'daily' | 'weekly' | 'monthly' | 'yearly' | 'never';
/**
 * Vite plugin to generate a sitemap.xml file.
 * @param options
 * @param {string} [options.hostname='localhost:5173'] - The hostname of the website.
 * @param {string[]} [options.exclude=[]] - The list of files to exclude.
 * @param {Record<string, string>} [options.frequency] - The frequency of the pages.
 * @param {Record<string, string>} [options.priority] - The priority of the pages.
 * @param {string} [options.outputFileName='sitemap.xml'] - The name of the output file.
 * @param {string} [options.routesDir='/app/routes'] - The directory where the routes are located.
 * @returns {Plugin}
 * @example
 * ```ts
 * import sitemap from 'honox/vite/sitemap'
 *
 * export default defineConfig({
 *  plugins: [
 *   sitemap({
 *    hostname: 'https://example.com',
 *    exclude: ['/secrets/*', '/user/*'],
 *    frequency: { '/': 'daily', '/about': 'monthly', '/posts/*': 'weekly' },
 *    priority: { '/': '1.0', '/about': '0.8', '/posts/*': '0.5' },
 *   }),
 *  ],
 * })
 * ```
 */
declare function sitemap(options?: SitemapOptions): Plugin;
/**
 * Check if the file path matches the pattern.
 * @param filePath
 * @returns {boolean}
 */
declare function isFilePathMatch(filePath: string, exclude: string[]): boolean;
declare function validateOptions(options?: SitemapOptions): void;
/**
 * Process the routes.
 * @param files
 * @param hostname
 * @param routesDir
 * @param frequency
 * @param priority
 * @returns {Array<{ url: string; lastMod: string; changeFreq: string; priority: string }>}
 */
declare function processRoutes(files: string[], hostname: string, routesDir: string, frequency: Record<string, Frequency>, priority: Record<string, string>): {
    url: string;
    lastMod: string;
    changeFreq: string;
    priority: string;
}[];
/**
 * Get the frequency for a given URL.
 * @param url
 * @returns {string}
 */
declare function getFrequency(url: string, frequency: Record<string, string>): string;
/**
 * Get the priority for a given URL.
 * @param url
 * @returns {string}
 */
declare function getPriority(url: string, priority: Record<string, string>): string;
/**
 * Get the value for a given URL based on patterns, checking from most specific to least specific.
 * @param url
 * @param patterns
 * @param defaultValue
 * @returns {string}
 */
declare function getValueForUrl(url: string, patterns: Record<string, string>, defaultValue: string): string;

export { type SitemapOptions, sitemap as default, defaultOptions, getFrequency, getPriority, getValueForUrl, isFilePathMatch, processRoutes, sitemap, validateOptions };
